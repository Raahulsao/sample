'use client'

import React, { useState } from 'react'
import { Copy, Check, Bot, Sparkles, Image as ImageIcon } from 'lucide-react'
import { motion, AnimatePresence } from 'motion/react'
import { cn } from '@/lib/utils'
import ThinkingIndicator from './thinking-indicator'
import { ImageDisplay, ImageLoadingSkeleton } from './image-display'
import type { ChatMessage } from '@/hooks/use-chat'

interface GeminiMessageProps {
  message: ChatMessage
  className?: string
}

export function GeminiMessage({ message, className }: GeminiMessageProps) {
  const [copied, setCopied] = useState(false)
  const isStreaming = message.metadata?.isStreaming || false
  const isGeminiText = message.type === 'gemini-text'
  const isGeminiImage = message.type === 'gemini-image'

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(message.content)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('Failed to copy text:', error)
    }
  }

  const formatContent = (content: string) => {
    // Basic formatting for Gemini responses
    return content
      .split('\n')
      .map((line, index) => (
        <span key={index}>
          {line}
          {index < content.split('\n').length - 1 && <br />}
        </span>
      ))
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className={cn(
        "flex items-start gap-3 p-4 rounded-lg",
        "bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-950/20 dark:to-purple-950/20",
        "border border-blue-200/30 dark:border-blue-800/30",
        className
      )}
    >
      {/* Avatar */}
      <div className={cn(
        "flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center",
        isGeminiText && "bg-gradient-to-r from-blue-500 to-purple-500",
        isGeminiImage && "bg-gradient-to-r from-purple-500 to-pink-500",
        "shadow-sm"
      )}>
        {isGeminiText && <Sparkles className="w-4 h-4 text-white" />}
        {isGeminiImage && <ImageIcon className="w-4 h-4 text-white" />}
      </div>

      {/* Content */}
      <div className="flex-1 min-w-0">
        {/* Header */}
        <div className="flex items-center gap-2 mb-2">
          <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
            {isGeminiText && 'Gemini Pro'}
            {isGeminiImage && 'Gemini Vision'}
          </span>
          {message.metadata?.model && (
            <span className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-2 py-0.5 rounded">
              {message.metadata.model}
            </span>
          )}
          {isStreaming && (
            <motion.div
              animate={{ opacity: [0.5, 1, 0.5] }}
              transition={{ duration: 1.5, repeat: Infinity }}
              className={cn(
                "text-xs",
                isGeminiText && "text-blue-500 dark:text-blue-400",
                isGeminiImage && "text-purple-500 dark:text-purple-400"
              )}
            >
              {isGeminiImage ? "Generating image..." : "Generating..."}
            </motion.div>
          )}
        </div>

        {/* Message Content */}
        <div className="relative">
          {isGeminiText && (
            <div className="prose prose-sm max-w-none dark:prose-invert">
              <div className="text-gray-800 dark:text-gray-200 leading-relaxed">
                {message.content ? formatContent(message.content) : (
                  <div className="flex items-center gap-2">
                    <ThinkingIndicator />
                    <span className="text-gray-500 dark:text-gray-400">Thinking...</span>
                  </div>
                )}
              </div>
            </div>
          )}

          {isGeminiImage && (
            <div className="space-y-3">
              {message.content && !message.metadata?.imageUrl && (
                <div className="text-gray-800 dark:text-gray-200 leading-relaxed">
                  {formatContent(message.content)}
                </div>
              )}
              {isStreaming && !message.metadata?.imageUrl ? (
                <ImageLoadingSkeleton />
              ) : message.metadata?.imageUrl ? (
                <ImageDisplay
                  src={message.metadata.imageUrl}
                  alt="Generated by Gemini Vision"
                  caption={message.content}
                  isLoading={isStreaming}
                />
              ) : message.content && !isStreaming ? (
                <div className="text-gray-800 dark:text-gray-200 leading-relaxed">
                  {formatContent(message.content)}
                </div>
              ) : null}
            </div>
          )}

          {/* Streaming cursor */}
          <AnimatePresence>
            {isStreaming && message.content && (
              <motion.span
                initial={{ opacity: 0 }}
                animate={{ opacity: [0, 1, 0] }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.8, repeat: Infinity }}
                className="inline-block w-2 h-4 bg-blue-500 ml-1"
              />
            )}
          </AnimatePresence>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between mt-3 pt-2 border-t border-gray-200/50 dark:border-gray-700/50">
          <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
            <span>{new Date(message.timestamp).toLocaleTimeString()}</span>
            {message.metadata?.tokens && (
              <span>{message.metadata.tokens} tokens</span>
            )}
          </div>

          {/* Actions */}
          <div className="flex items-center gap-1">
            {message.content && !isStreaming && (
              <button
                onClick={handleCopy}
                className={cn(
                  "p-1.5 rounded-md transition-colors",
                  "hover:bg-gray-200 dark:hover:bg-gray-700",
                  "focus:outline-none focus:ring-2 focus:ring-blue-500/20"
                )}
                title="Copy message"
              >
                <AnimatePresence mode="wait">
                  {copied ? (
                    <motion.div
                      key="check"
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                      transition={{ duration: 0.2 }}
                    >
                      <Check className="w-3 h-3 text-green-500" />
                    </motion.div>
                  ) : (
                    <motion.div
                      key="copy"
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                      transition={{ duration: 0.2 }}
                    >
                      <Copy className="w-3 h-3" />
                    </motion.div>
                  )}
                </AnimatePresence>
              </button>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  )
}

// Component for displaying regular chat messages with Gemini support
interface ChatMessageDisplayProps {
  message: ChatMessage
  className?: string
}

export function ChatMessageDisplay({ message, className }: ChatMessageDisplayProps) {
  const isGeminiMessage = message.type === 'gemini-text' || message.type === 'gemini-image'
  
  if (isGeminiMessage) {
    return <GeminiMessage message={message} className={className} />
  }

  // Regular message display for user/ai messages
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className={cn(
        "flex items-start gap-3 p-4 rounded-lg",
        message.type === 'user' 
          ? "bg-gray-50 dark:bg-gray-900 ml-8" 
          : "bg-white dark:bg-gray-800 mr-8",
        "border border-gray-200 dark:border-gray-700",
        className
      )}
    >
      <div className={cn(
        "flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium",
        message.type === 'user' 
          ? "bg-blue-500" 
          : "bg-gray-500"
      )}>
        {message.type === 'user' ? 'U' : 'AI'}
      </div>
      
      <div className="flex-1 min-w-0">
        <div className="text-gray-800 dark:text-gray-200 leading-relaxed">
          {message.content}
        </div>
        <div className="text-xs text-gray-500 dark:text-gray-400 mt-2">
          {new Date(message.timestamp).toLocaleTimeString()}
        </div>
      </div>
    </motion.div>
  )
}