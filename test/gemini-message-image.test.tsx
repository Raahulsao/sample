import React from 'react'
import { describe, it, expect, vi, beforeEach } from 'vitest'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { GeminiMessage, ChatMessageDisplay } from '@/components/gemini-message'
import type { ChatMessage } from '@/hooks/use-chat'

// Mock framer-motion
vi.mock('motion/react', () => ({
  motion: {
    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,
    span: ({ children, ...props }: any) => <span {...props}>{children}</span>,
  },
  AnimatePresence: ({ children }: any) => <>{children}</>,
}))

// Mock the image display component
vi.mock('@/components/image-display', () => ({
  ImageDisplay: ({ src, alt, caption, isLoading }: any) => (
    <div data-testid="image-display">
      <img src={src} alt={alt} />
      {caption && <div data-testid="image-caption">{caption}</div>}
      {isLoading && <div data-testid="image-loading">Loading...</div>}
    </div>
  ),
  ImageLoadingSkeleton: () => <div data-testid="image-skeleton">Loading skeleton</div>,
}))

// Mock the thinking indicator
vi.mock('@/components/thinking-indicator', () => ({
  default: () => <div data-testid="thinking-indicator">Thinking...</div>,
}))

describe('GeminiMessage - Image Generation Features', () => {
  const baseMessage: ChatMessage = {
    id: 'test-1',
    content: 'Test message',
    type: 'gemini-text',
    timestamp: new Date('2023-01-01T00:00:00Z'),
  }

  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('Gemini Image Messages', () => {
    it('renders gemini image message with correct avatar and styling', () => {
      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'A beautiful sunset over mountains',
        metadata: {
          imageUrl: 'https://example.com/sunset.jpg',
        },
      }

      render(<GeminiMessage message={imageMessage} />)

      // Should show Gemini Vision label
      expect(screen.getByText('Gemini Vision')).toBeInTheDocument()

      // Should have purple gradient styling for image messages
      const avatar = document.querySelector('.bg-gradient-to-r.from-purple-500.to-pink-500')
      expect(avatar).toBeInTheDocument()
    })

    it('displays image with ImageDisplay component when imageUrl is provided', () => {
      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'A beautiful sunset',
        metadata: {
          imageUrl: 'https://example.com/sunset.jpg',
        },
      }

      render(<GeminiMessage message={imageMessage} />)

      const imageDisplay = screen.getByTestId('image-display')
      expect(imageDisplay).toBeInTheDocument()

      const image = screen.getByRole('img')
      expect(image).toHaveAttribute('src', 'https://example.com/sunset.jpg')
      expect(image).toHaveAttribute('alt', 'Generated by Gemini Vision')

      // Should show caption
      const caption = screen.getByTestId('image-caption')
      expect(caption).toHaveTextContent('A beautiful sunset')
    })

    it('shows loading skeleton when streaming and no imageUrl', () => {
      const streamingMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: '',
        metadata: {
          isStreaming: true,
        },
      }

      render(<GeminiMessage message={streamingMessage} />)

      expect(screen.getByTestId('image-skeleton')).toBeInTheDocument()
      expect(screen.getByText('Generating image...')).toBeInTheDocument()
    })

    it('shows text content when no imageUrl and not streaming', () => {
      const textOnlyMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Unable to generate image at this time',
      }

      render(<GeminiMessage message={textOnlyMessage} />)

      expect(screen.getByText('Unable to generate image at this time')).toBeInTheDocument()
      expect(screen.queryByTestId('image-display')).not.toBeInTheDocument()
    })

    it('passes loading state to ImageDisplay when streaming', () => {
      const streamingImageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Generating...',
        metadata: {
          isStreaming: true,
          imageUrl: 'https://example.com/generating.jpg',
        },
      }

      render(<GeminiMessage message={streamingImageMessage} />)

      const imageDisplay = screen.getByTestId('image-display')
      expect(imageDisplay).toBeInTheDocument()
      expect(screen.getByTestId('image-loading')).toBeInTheDocument()
    })

    it('shows correct streaming indicator for image generation', () => {
      const streamingMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: '',
        metadata: {
          isStreaming: true,
        },
      }

      render(<GeminiMessage message={streamingMessage} />)

      const streamingIndicator = screen.getByText('Generating image...')
      expect(streamingIndicator).toBeInTheDocument()
      expect(streamingIndicator).toHaveClass('text-purple-500')
    })

    it('displays model information for image messages', () => {
      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Test image',
        metadata: {
          model: 'gemini-1.5-pro-vision',
          imageUrl: 'https://example.com/test.jpg',
        },
      }

      render(<GeminiMessage message={imageMessage} />)

      expect(screen.getByText('gemini-1.5-pro-vision')).toBeInTheDocument()
    })

    it('handles copy functionality for image messages', async () => {
      const writeText = vi.fn().mockResolvedValue(undefined)
      Object.assign(navigator, {
        clipboard: { writeText },
      })

      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Beautiful landscape',
        metadata: {
          imageUrl: 'https://example.com/landscape.jpg',
        },
      }

      render(<GeminiMessage message={imageMessage} />)

      const copyButton = screen.getByTitle('Copy message')
      fireEvent.click(copyButton)

      await waitFor(() => {
        expect(writeText).toHaveBeenCalledWith('Beautiful landscape')
      })
    })

    it('does not show copy button when streaming', () => {
      const streamingMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: '',
        metadata: {
          isStreaming: true,
        },
      }

      render(<GeminiMessage message={streamingMessage} />)

      expect(screen.queryByTitle('Copy message')).not.toBeInTheDocument()
    })
  })

  describe('Text vs Image Message Differentiation', () => {
    it('shows different avatars for text vs image messages', () => {
      const { rerender } = render(<GeminiMessage message={{ ...baseMessage, type: 'gemini-text' }} />)

      // Text message should have blue-purple gradient
      expect(document.querySelector('.bg-gradient-to-r.from-blue-500.to-purple-500')).toBeInTheDocument()

      rerender(<GeminiMessage message={{ ...baseMessage, type: 'gemini-image' }} />)

      // Image message should have purple-pink gradient
      expect(document.querySelector('.bg-gradient-to-r.from-purple-500.to-pink-500')).toBeInTheDocument()
    })

    it('shows different labels for text vs image messages', () => {
      const { rerender } = render(<GeminiMessage message={{ ...baseMessage, type: 'gemini-text' }} />)

      expect(screen.getByText('Gemini Pro')).toBeInTheDocument()

      rerender(<GeminiMessage message={{ ...baseMessage, type: 'gemini-image' }} />)

      expect(screen.getByText('Gemini Vision')).toBeInTheDocument()
    })

    it('shows different streaming messages for text vs image', () => {
      const streamingTextMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-text',
        metadata: { isStreaming: true },
      }

      const { rerender } = render(<GeminiMessage message={streamingTextMessage} />)

      expect(screen.getByText('Generating...')).toBeInTheDocument()
      expect(screen.getByText('Generating...')).toHaveClass('text-blue-500')

      const streamingImageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        metadata: { isStreaming: true },
      }

      rerender(<GeminiMessage message={streamingImageMessage} />)

      expect(screen.getByText('Generating image...')).toBeInTheDocument()
      expect(screen.getByText('Generating image...')).toHaveClass('text-purple-500')
    })
  })

  describe('ChatMessageDisplay Integration', () => {
    it('renders GeminiMessage for gemini-image type', () => {
      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Test image',
      }

      render(<ChatMessageDisplay message={imageMessage} />)

      expect(screen.getByText('Gemini Vision')).toBeInTheDocument()
    })

    it('renders GeminiMessage for gemini-text type', () => {
      const textMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-text',
        content: 'Test text',
      }

      render(<ChatMessageDisplay message={textMessage} />)

      expect(screen.getByText('Gemini Pro')).toBeInTheDocument()
    })

    it('renders regular message for non-gemini types', () => {
      const userMessage: ChatMessage = {
        ...baseMessage,
        type: 'user',
        content: 'User message',
      }

      render(<ChatMessageDisplay message={userMessage} />)

      expect(screen.queryByText('Gemini Pro')).not.toBeInTheDocument()
      expect(screen.queryByText('Gemini Vision')).not.toBeInTheDocument()
      expect(screen.getByText('User message')).toBeInTheDocument()
    })
  })

  describe('Error Handling', () => {
    it('handles missing imageUrl gracefully', () => {
      const imageMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: 'Image description without URL',
        metadata: {
          // No imageUrl provided
        },
      }

      render(<GeminiMessage message={imageMessage} />)

      expect(screen.getByText('Image description without URL')).toBeInTheDocument()
      expect(screen.queryByTestId('image-display')).not.toBeInTheDocument()
    })

    it('handles empty content gracefully', () => {
      const emptyMessage: ChatMessage = {
        ...baseMessage,
        type: 'gemini-image',
        content: '',
        metadata: {
          imageUrl: 'https://example.com/test.jpg',
        },
      }

      render(<GeminiMessage message={emptyMessage} />)

      const imageDisplay = screen.getByTestId('image-display')
      expect(imageDisplay).toBeInTheDocument()
      expect(screen.queryByTestId('image-caption')).not.toBeInTheDocument()
    })
  })
})